<!-- Bootstrap JS Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Custom JS -->
  <script src="/js/main.js"></script>
  <script>
    // Dynamic background effect
    document.addEventListener('DOMContentLoaded', function() {
      // Create subtle particle background effect
      const createParticles = () => {
        const body = document.querySelector('body');
        const particleCount = 30; // Reduced count
        
        for (let i = 0; i < particleCount; i++) {
          const particle = document.createElement('div');
          particle.classList.add('particle');
          
          // Random position, size, and animation delay
          const size = Math.random() * 2 + 0.5; // Smaller particles
          const posX = Math.random() * 100;
          const posY = Math.random() * 100;
          const delay = Math.random() * 5;
          const duration = Math.random() * 15 + 15; // Slower animation
          const opacity = Math.random() * 0.15 + 0.05; // More transparent
          
          particle.style.width = `${size}px`;
          particle.style.height = `${size}px`;
          particle.style.left = `${posX}%`;
          particle.style.top = `${posY}%`;
          particle.style.opacity = opacity;
          particle.style.animationDelay = `${delay}s`;
          particle.style.animationDuration = `${duration}s`;
          
          body.appendChild(particle);
        }
      };
      
      createParticles();
      
      // Simplified hover effect on cards
      const cards = document.querySelectorAll('.card');
      cards.forEach(card => {
        card.addEventListener('mousemove', (e) => {
          const rect = card.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;
          
          const centerX = rect.width / 2;
          const centerY = rect.height / 2;
          
          // Reduced tilt effect
          const angleX = (y - centerY) / 30; 
          const angleY = (centerX - x) / 30;
          
          card.style.transform = `perspective(1000px) rotateX(${angleX}deg) rotateY(${angleY}deg) translateZ(5px)`;
        });
        
        card.addEventListener('mouseleave', () => {
          card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) translateZ(0)';
        });
      });
    });
  </script>
  <script>
    // Force all links to use HTTP instead of HTTPS
    document.addEventListener('click', function(e) {
      // Check if the clicked element is a link
      if (e.target.tagName === 'A' || e.target.closest('a')) {
        const link = e.target.tagName === 'A' ? e.target : e.target.closest('a');
        const href = link.getAttribute('href');
        
        // If it's an absolute link starting with https:, convert it to http:
        if (href && href.startsWith('https:')) {
          link.setAttribute('href', href.replace(/^https:/, 'http:'));
        }
      }
    }, true);
    
    // Prevent form submissions to HTTPS
    document.addEventListener('submit', function(e) {
      const form = e.target;
      const action = form.getAttribute('action');
      
      // If form action is HTTPS, convert to HTTP
      if (action && action.startsWith('https:')) {
        form.setAttribute('action', action.replace(/^https:/, 'http:'));
      }
    });
    
    // Override fetch and XMLHttpRequest to always use HTTP
    const originalFetch = window.fetch;
    window.fetch = function() {
      if (arguments[0] && typeof arguments[0] === 'string' && arguments[0].startsWith('https:')) {
        arguments[0] = arguments[0].replace(/^https:/, 'http:');
      }
      return originalFetch.apply(this, arguments);
    };
    
    const originalOpen = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function() {
      if (arguments[1] && typeof arguments[1] === 'string' && arguments[1].startsWith('https:')) {
        arguments[1] = arguments[1].replace(/^https:/, 'http:');
      }
      return originalOpen.apply(this, arguments);
    };
  </script>
</body>
</html>